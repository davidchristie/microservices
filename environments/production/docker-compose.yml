version: "3.7"

services:
  accounts:
    build:
      context: ../../services/accounts
    command: npm run api:production
    depends_on:
      - accounts-neo4j
    environment:
      - JWT_SECRET=secret
      - NEO4J_HOST=bolt://accounts-neo4j:7687
      - NEO4J_PASSWORD=accounts
      - NEO4J_USERNAME=neo4j
      - NODE_ENV=production
      - PORT=4000
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:4000/.well-known/apollo/server-health",
        ]

  accounts-neo4j:
    environment:
      - "NEO4J_AUTH=neo4j/accounts"
    image: neo4j:3.5
    # ports:
    #   - "7474:7474"
    #   - "7687:7687"

  customers:
    command: npm run api:development
    depends_on:
      - customers-prisma
    image: node:10
    volumes:
      - ../../services/customers

  customers-mysql:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: prisma
    volumes:
      - customers-mysql-data:/var/lib/mysql

  customers-prisma:
    depends_on:
      - customers-mysql
    image: prismagraphql/prisma:1.34
    restart: always
    ports:
      - "4466:4466"
    environment:
      PRISMA_CONFIG: |
        port: 4466
        # uncomment the next line and provide the env var PRISMA_MANAGEMENT_API_SECRET=my-secret to activate cluster security
        # managementApiSecret: my-secret
        databases:
          default:
            connector: mysql
            host: mysql
            user: root
            password: prisma
            rawAccess: true
            port: 3306
            migrations: true

  gateway:
    build:
      context: ../../services/gateway
    command: npm run api:production
    depends_on:
      - accounts
      - inventory
      - platform-consul
      - products
      - reviews
    environment:
      - JWT_SECRET=secret
      - PORT=4000
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:4000/.well-known/apollo/server-health",
        ]
    ports:
      - 4000:4000
    restart: always
    working_dir: /gateway

  inventory:
    build:
      context: ../../services/inventory
    command: npm run api:production
    environment:
      - PORT=4000
    image: node:10
    volumes:
      - ../../services/inventory:/inventory
    working_dir: /inventory

  platform-consul:
    command: agent -bootstrap -client=0.0.0.0 -server -ui
    image: consul:1.6
    ports:
      - 8500:8500
    volumes:
      - platform-consul-data:/consul/data

  products:
    build:
      context: ../../services/products
    command: npm run api:production
    environment:
      - NEO4J_HOST=bolt://products-neo4j:7687
      - NEO4J_PASSWORD=products
      - NEO4J_USERNAME=neo4j
      - NODE_ENV=production
      - PORT=4000
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:4000/.well-known/apollo/server-health",
        ]

  products-neo4j:
    container_name: products-neo4j
    environment:
      - "NEO4J_AUTH=neo4j/products"
    image: neo4j:3.5
    # ports:
    #   - "7474:7474"
    #   - "7687:7687"

  reviews:
    command: npm run api:production
    environment:
      - PORT=4000
    image: node:10
    volumes:
      - ../../services/reviews:/reviews
    working_dir: /reviews

  web-app:
    build:
      args:
        - GATEWAY_HOST=http://localhost:4000
      context: ../../services/web-app
      dockerfile: production.Dockerfile
    ports:
      - 3000:80

volumes:
  customers-mysql-data:
  platform-consul-data:
